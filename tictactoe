
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic Tac Toe</title>
  <style>
    body {

background-color: skyblue;
    

      display: flex;
      flex-direction: column;
      align-items: center;
      font-family: Arial, sans-serif;
    }
    h1 {
      margin-top: 20px;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
      margin-top: 20px;
    }
    .cell {
      width: 100px;
      height: 100px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2em;
      cursor: pointer;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
    }
    .cell:hover {
      background-color: #e0e0e0;
    }
    .cell.disabled {
      cursor: not-allowed;
      background-color: #ddd;
    }
    .message {
      margin-top: 20px;
    }
    .reset {
      margin-top: 10px;
      padding: 8px 16px;
      font-size: 1em;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <h1>Tic Tac Toe</h1>
  <div class="board" id="board"></div>
  <div class="message" id="message"></div>
  <button class="reset" onclick="resetGame()">Restart Game</button>

  <script>
    const boardElement = document.getElementById('board');
    const messageElement = document.getElementById('message');
    let currentPlayer = 'X';
    let board = ['', '', '', '', '', '', '', '', ''];

    // Initialize the board
    function createBoard() {
      boardElement.innerHTML = '';
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.addEventListener('click', () => makeMove(i));
        boardElement.appendChild(cell);
      }
    }

    // Handle a player move
    function makeMove(index) {
      if (board[index] === '' && !isGameOver()) {
        board[index] = currentPlayer;
        updateBoard();
        if (checkWin(currentPlayer)) {
          messageElement.innerText = `Player ${currentPlayer} wins!`;
          disableBoard();
        } else if (board.every(cell => cell !== '')) {
          messageElement.innerText = "It's a tie!";
        } else {
          currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
          messageElement.innerText = `Player ${currentPlayer}'s turn`;
        }
      }
    }

    // Update the board display
    function updateBoard() {
      const cells = document.querySelectorAll('.cell');
      cells.forEach((cell, index) => {
        cell.innerText = board[index];
        if (board[index] !== '') {
          cell.classList.add('disabled');
        }
      });
    }

    // Check for a win
    function checkWin(player) {
      const winConditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
      ];
      return winConditions.some(condition => 
        condition.every(index => board[index] === player)
      );
    }

    // Check if the game is over
    function isGameOver() {
      return checkWin('X') || checkWin('O') || board.every(cell => cell !== '');
    }

    // Disable the board
    function disableBoard() {
      const cells = document.querySelectorAll('.cell');
      cells.forEach(cell => cell.classList.add('disabled'));
    }

    // Reset the game
    function resetGame() {
      board = ['', '', '', '', '', '', '', '', ''];
      currentPlayer = 'X';
      messageElement.innerText = `Player ${currentPlayer}'s turn`;
      createBoard();
    }

    // Start the game
    createBoard();
    messageElement.innerText = `Player ${currentPlayer}'s turn`;
  </script>

</body>
</html>
